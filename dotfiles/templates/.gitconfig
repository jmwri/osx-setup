[user]
	name = "$OSXS_NAME"
	email = "$OSXS_EMAIL"

[commit]
    template = "$HOME/.git_commit_template"

[color]
        ui = always

[color "branch"]
        current = green bold
        local = green
        remote = yellow

[color "diff"]
        frag = magenta
        meta = yellow
        new = green
        old = red

[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = "red bold 52"
        newNormal = "green bold"
        newHighlight = "green bold 22"

[color "status"]
        added = green reverse
        changed = yellow reverse
        untracked = red reverse

# Git mergetool
[merge]
        tool = opendiff

[core]
        editor = /usr/bin/vim
        abbrev = 12
        attributesfile = ~/.gitattributes
	    excludesfile = ~/.gitignore_global
        autocrlf = input
        mergeoptions = --no-edit
        ignorecase = false

[pager]
        # Insanely beautiful diffs ==> npm install -g diff-so-fancy
        diff = diff-so-fancy | less --tabs=4 -RFX
        show = diff-so-fancy | less --tabs=4 -RFX

[diff "bin"]
        # Use `hexdump` to diff binary files
        textconv = hexdump -v -C

[pretty]
        custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
        #                     │        │            │            │             └─ author name
        #                     │        │            │            └─ message
        #                     │        │            └─ date (relative)
        #                     │        └─ decorations (branch, heads or tags)
        #                     └─ hash (abbreviated)

[help]
        # Correct typos
        autocorrect = 1
[alias]
    cp = cherry-pick
    st = status -s
    cl = clone
    ci = commit
    co = checkout
    br = branch
    di = diff
    dw = diff --word-diff
    dc = diff --cached
    dis = diff --shortstat
    dcs = diff --cached --shortstat
    unstage = reset HEAD --
    last = log -1 HEAD
    # List commits in short form, with colors and branch/tag annotations
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    # List commits showing changed files
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    # List with no colors if you need to chain the out put with Unix pipes
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
    # List oneline commits showing dates
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    # List oneline commits showing relative dates
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    # You can see all the commits related to a file, with the diff of the changes with git log -u which i shortened to fl for filelog
    filelog = log -u
    fl = log -u
    # Show modified files in last commit
    dl = "!git ll -1"
    # Show a diff last commit
    dlc = diff --cached HEAD^
    # Show content (full diff) of a commit given a revision
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    # Show file changed in a commit given a revision
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    # Find a file in codebase
    f = "!git ls-files | grep -i"
    # Search/grep your entire codebase for a string
    grep = grep -Ii
    gr = grep -Ii
    # Grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
    # List aliases
    la = "!git config -l | grep alias | cut -c 7-"
    # Show the last tag
    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0
